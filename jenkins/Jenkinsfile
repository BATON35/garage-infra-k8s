pipeline {
  agent any

  environment {
    HELM_HOME = './helm/umbrella'
    HELM_PATH = "${WORKSPACE}/.helm/bin"
  }

  stages {
    stage('Smoke Test') {
      steps {
        echo '‚úÖ Jenkins dzia≈Ça üéâ'
      }
    }

    stage('Checkout') {
      steps {
        checkout scm
        echo "üì¶ Kod ≈∫r√≥d≈Çowy pobrany z repozytorium"
      }
    }

    stage('Install Helm Temporarily') {
      steps {
        sh '''
          curl -fsSL https://get.helm.sh/helm-v3.18.4-linux-amd64.tar.gz -o helm.tar.gz
          tar -zxvf helm.tar.gz
          mkdir -p .helm/bin
          mv linux-amd64/helm .helm/bin/helm
          export PATH=$PWD/.helm/bin:$PATH
          echo "‚úÖ Helm zainstalowany tymczasowo"
          helm version
        '''
      }
    }

    stage('Prepare Helm Dependencies') {
      steps {
        sh '''
          export PATH=$PWD/.helm/bin:$PATH
          helm dependency update ./helm/umbrella
        '''
        echo "üîß Zale≈ºno≈õci Helm zaktualizowane"
      }
    }


    stage('Create Namespace') {
      steps {
        sh '''
          kubectl create namespace garage-core || echo "garage-core namespace already exist. üëÄ"
          kubectl get namespace garage-core --output=name
        '''
      }
    }



    stage('Deploy Microservices') {
      steps {
        sh '''
          export PATH=$PWD/.helm/bin:$PATH
          helm upgrade --install platform ./helm/umbrella -f ./helm/umbrella/values.yaml
        '''
        echo "üöÄ Mikroserwisy wdro≈ºone"
      }
    }

    stage('Verify Rollouts') {
      steps {
        sh '''
          kubectl rollout status deployment/discovery-service || echo '‚ùå Discovery-service nie gotowy'
          kubectl rollout status deployment/vehicle-service || echo '‚ùå Vehicle-service nie gotowy'
          kubectl rollout status deployment/api-gateway || echo '‚ùå API Gateway nie gotowy'
          kubectl rollout status deployment/vehicle-db || echo '‚ùå Vehicle-db nie gotowy'
        '''
        echo "üîç Rollout-check zako≈Ñczony"
      }
    }
  }
}
