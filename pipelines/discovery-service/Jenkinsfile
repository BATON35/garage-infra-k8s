pipeline {
  agent any

  environment {
    GIT_REPO    = "git@github.com:BATON35/discovery-service.git"
    SERVICE_DIR = "discovery-service"
    IMAGE_NAME  = "konrad84kb/discovery-service"
    IMAGE_TAG   = "latest"  // Mo≈ºna p√≥≈∫niej podmieniƒá np. na SHA lub build number
  }

  stages {

    stage('Clean Workspace') {
      steps {
        sh "rm -rf $SERVICE_DIR"
      }
    }

     stage('Checkout') {
          steps {
            checkout scm
            echo "üì¶ Kod ≈∫r√≥d≈Çowy pobrany z repozytorium"
            sh "ls -la"
          }
        }
    stage('Verify SSH Credential') {
      steps {
        withCredentials([sshUserPrivateKey(
          credentialsId: 'github-ssh-key',
          keyFileVariable: 'KEYFILE',
          usernameVariable: 'USERNAME'
        )]) {
          sh 'echo "U≈ºywam klucza: $KEYFILE dla u≈ºytkownika $USERNAME"'
          sh 'ssh -i "$KEYFILE" -T git@github.com || echo "üîê Brak dostƒôpu"'
        }
      }
    }


     stage('Clone vehicle-service') {
       steps {
         checkout([
           $class: 'GitSCM',
           branches: [[name: '*/main']],
           userRemoteConfigs: [[
             url: "${GIT_REPO}",
             credentialsId: 'github-ssh-key'
           ]]
         ])
       }
     }

stage('Clone vehicle-service') {
  steps {
    checkout([...])
    sh 'ls -la'
  }
}
    stage('Build JAR') {
      steps {
        dir(SERVICE_DIR) {
        sh "pwd"
        sh "ls -la"
        sh './mvnw clean package -DskipTests'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        sh "docker build -t $IMAGE_NAME:$IMAGE_TAG $SERVICE_DIR"
      }
    }

    stage('Push to DockerHub') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
          sh 'echo $PASS | docker login -u $USER --password-stdin'
          sh "docker push $IMAGE_NAME:$IMAGE_TAG"
        }
      }
    }

  }

  post {
    success {
      echo "‚úÖ Discovery-service image pushed to DockerHub: $IMAGE_NAME:$IMAGE_TAG"
    }
    failure {
      echo "‚ùå Build or push failed"
    }
  }
}
